#!/bin/sh
# Universal Package Manager Abstraction Tool
# POSIX compliant script that abstracts package management across different distributions

set -e

# Configuration
PAC_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/pac"
PAC_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/pac"

# Ensure directories exist
mkdir -p "$PAC_CONFIG_DIR" "$PAC_CACHE_DIR"

# Color definitions
if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    NC='\033[0m' # No Color
else
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    PURPLE=''
    CYAN=''
    NC=''
fi

# Package name mappings for different distributions
# Format: "common_name:arch_name:debian_name:void_name"
create_package_mappings() {
    cat > "$PAC_CONFIG_DIR/package_mappings" << 'EOF'
# Development packages
build-essential:base-devel:build-essential:base-devel
git:git:git:git
curl:curl:curl:curl
wget:wget:wget:wget
vim:vim:vim:vim
neovim:neovim:neovim:neovim
emacs:emacs:emacs:emacs
firefox:firefox:firefox:firefox
chromium:chromium:chromium-browser:chromium

# Libraries
openssl-dev:openssl:libssl-dev:openssl-devel
zlib-dev:zlib:zlib1g-dev:zlib-devel
sqlite-dev:sqlite:libsqlite3-dev:sqlite-devel
python-dev:python:python3-dev:python3-devel
nodejs:nodejs:nodejs:nodejs
npm:npm:npm:nodejs

# System tools
htop:htop:htop:htop
tree:tree:tree:tree
unzip:unzip:unzip:unzip
zip:zip:zip:zip
tar:tar:tar:tar
rsync:rsync:rsync:rsync

# Network tools
nmap:nmap:nmap:nmap
netcat:openbsd-netcat:netcat-openbsd:openbsd-netcat
wget:wget:wget:wget
EOF
}

# Initialize mappings if they don't exist
[ ! -f "$PAC_CONFIG_DIR/package_mappings" ] && create_package_mappings

# Detect distribution and package manager
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "$ID"
    elif [ -f /etc/arch-release ]; then
        echo "arch"
    elif [ -f /etc/debian_version ]; then
        echo "debian"
    elif [ -f /etc/void-release ]; then
        echo "void"
    else
        echo "unknown"
    fi
}

# Detect available package manager
detect_package_manager() {
    distro=$(detect_distro)
    
    case "$distro" in
        arch|manjaro|endeavouros)
            if command -v yay >/dev/null 2>&1; then
                echo "yay"
            elif command -v paru >/dev/null 2>&1; then
                echo "paru"
            elif command -v pacman >/dev/null 2>&1; then
                echo "pacman"
            else
                echo "unknown"
            fi
            ;;
        debian|ubuntu|mint|pop)
            if command -v apt >/dev/null 2>&1; then
                echo "apt"
            elif command -v apt-get >/dev/null 2>&1; then
                echo "apt-get"
            else
                echo "unknown"
            fi
            ;;
        void)
            if command -v xbps-install >/dev/null 2>&1; then
                echo "xbps"
            else
                echo "unknown"
            fi
            ;;
        fedora|centos|rhel)
            if command -v dnf >/dev/null 2>&1; then
                echo "dnf"
            elif command -v yum >/dev/null 2>&1; then
                echo "yum"
            else
                echo "unknown"
            fi
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

# Get package name for current distribution
get_package_name() {
    common_name="$1"
    distro=$(detect_distro)
    
    # Check if mapping exists
    if [ -f "$PAC_CONFIG_DIR/package_mappings" ]; then
        mapping=$(grep "^$common_name:" "$PAC_CONFIG_DIR/package_mappings" 2>/dev/null || true)
        if [ -n "$mapping" ]; then
            case "$distro" in
                arch|manjaro|endeavouros)
                    echo "$mapping" | cut -d: -f2
                    ;;
                debian|ubuntu|mint|pop)
                    echo "$mapping" | cut -d: -f3
                    ;;
                void)
                    echo "$mapping" | cut -d: -f4
                    ;;
                *)
                    echo "$common_name"
                    ;;
            esac
            return
        fi
    fi
    
    # Return original name if no mapping found
    echo "$common_name"
}

# Suggest package name corrections
suggest_corrections() {
    query="$1"
    pkg_mgr=$(detect_package_manager)
    
    printf "${YELLOW}Package '$query' not found. Suggestions:${NC}\n"
    
    case "$pkg_mgr" in
        yay|paru|pacman)
            # Search for similar packages
            if command -v "$pkg_mgr" >/dev/null 2>&1; then
                case "$pkg_mgr" in
                    yay|paru)
                        "$pkg_mgr" -Ss "$query" 2>/dev/null | head -10 | grep -E "^[a-zA-Z0-9]" | cut -d' ' -f1 | head -5
                        ;;
                    pacman)
                        pacman -Ss "$query" 2>/dev/null | head -10 | grep -E "^[a-zA-Z0-9]" | cut -d' ' -f1 | head -5
                        ;;
                esac
            fi
            ;;
        apt|apt-get)
            if command -v apt-cache >/dev/null 2>&1; then
                apt-cache search "$query" 2>/dev/null | head -5 | cut -d' ' -f1
            fi
            ;;
        xbps)
            if command -v xbps-query >/dev/null 2>&1; then
                xbps-query -Rs "$query" 2>/dev/null | head -5 | cut -d' ' -f2 | cut -d- -f1
            fi
            ;;
    esac
    
    # Also check package mappings for similar names
    if [ -f "$PAC_CONFIG_DIR/package_mappings" ]; then
        printf "${CYAN}Common package names containing '$query':${NC}\n"
        grep -i "$query" "$PAC_CONFIG_DIR/package_mappings" 2>/dev/null | cut -d: -f1 | head -5
    fi
}

# Install packages
install_packages() {
    pkg_mgr=$(detect_package_manager)
    
    if [ "$pkg_mgr" = "unknown" ]; then
        printf "${RED}Error: No supported package manager found${NC}\n"
        return 1
    fi
    
    # Convert package names
    converted_packages=""
    for pkg in "$@"; do
        converted_pkg=$(get_package_name "$pkg")
        converted_packages="$converted_packages $converted_pkg"
    done
    
    printf "${GREEN}Installing packages with $pkg_mgr:${NC} $converted_packages\n"
    
    case "$pkg_mgr" in
        yay|paru)
            "$pkg_mgr" -S $converted_packages
            ;;
        pacman)
            sudo pacman -S $converted_packages
            ;;
        apt)
            sudo apt update && sudo apt install $converted_packages
            ;;
        apt-get)
            sudo apt-get update && sudo apt-get install $converted_packages
            ;;
        xbps)
            sudo xbps-install -S $converted_packages
            ;;
        dnf)
            sudo dnf install $converted_packages
            ;;
        yum)
            sudo yum install $converted_packages
            ;;
    esac
}

# List/search packages
list_packages() {
    pkg_mgr=$(detect_package_manager)
    query="$1"
    
    if [ "$pkg_mgr" = "unknown" ]; then
        printf "${RED}Error: No supported package manager found${NC}\n"
        return 1
    fi
    
    if [ -n "$query" ]; then
        printf "${BLUE}Searching for packages matching '$query':${NC}\n"
        converted_query=$(get_package_name "$query")
        
        case "$pkg_mgr" in
            yay|paru)
                "$pkg_mgr" -Ss "$converted_query"
                ;;
            pacman)
                pacman -Ss "$converted_query"
                ;;
            apt)
                apt search "$converted_query"
                ;;
            apt-get)
                if command -v apt-cache >/dev/null 2>&1; then
                    apt-cache search "$converted_query"
                fi
                ;;
            xbps)
                xbps-query -Rs "$converted_query"
                ;;
            dnf)
                dnf search "$converted_query"
                ;;
            yum)
                yum search "$converted_query"
                ;;
        esac
    else
        printf "${BLUE}Listing installed packages:${NC}\n"
        case "$pkg_mgr" in
            yay|paru|pacman)
                pacman -Q
                ;;
            apt|apt-get)
                if command -v apt >/dev/null 2>&1; then
                    apt list --installed
                else
                    dpkg -l
                fi
                ;;
            xbps)
                xbps-query -l
                ;;
            dnf)
                dnf list installed
                ;;
            yum)
                yum list installed
                ;;
        esac
    fi
}

# Update package database
update_packages() {
    pkg_mgr=$(detect_package_manager)
    
    printf "${GREEN}Updating package database with $pkg_mgr${NC}\n"
    
    case "$pkg_mgr" in
        yay|paru)
            "$pkg_mgr" -Sy
            ;;
        pacman)
            sudo pacman -Sy
            ;;
        apt)
            sudo apt update
            ;;
        apt-get)
            sudo apt-get update
            ;;
        xbps)
            sudo xbps-install -S
            ;;
        dnf)
            sudo dnf check-update
            ;;
        yum)
            sudo yum check-update
            ;;
    esac
}

# Upgrade packages
upgrade_packages() {
    pkg_mgr=$(detect_package_manager)
    
    printf "${GREEN}Upgrading packages with $pkg_mgr${NC}\n"
    
    case "$pkg_mgr" in
        yay|paru)
            "$pkg_mgr" -Syu
            ;;
        pacman)
            sudo pacman -Syu
            ;;
        apt)
            sudo apt update && sudo apt upgrade
            ;;
        apt-get)
            sudo apt-get update && sudo apt-get upgrade
            ;;
        xbps)
            sudo xbps-install -Su
            ;;
        dnf)
            sudo dnf upgrade
            ;;
        yum)
            sudo yum update
            ;;
    esac
}

# Remove packages
remove_packages() {
    pkg_mgr=$(detect_package_manager)
    
    # Convert package names
    converted_packages=""
    for pkg in "$@"; do
        converted_pkg=$(get_package_name "$pkg")
        converted_packages="$converted_packages $converted_pkg"
    done
    
    printf "${RED}Removing packages with $pkg_mgr:${NC} $converted_packages\n"
    
    case "$pkg_mgr" in
        yay|paru)
            "$pkg_mgr" -R $converted_packages
            ;;
        pacman)
            sudo pacman -R $converted_packages
            ;;
        apt)
            sudo apt remove $converted_packages
            ;;
        apt-get)
            sudo apt-get remove $converted_packages
            ;;
        xbps)
            sudo xbps-remove $converted_packages
            ;;
        dnf)
            sudo dnf remove $converted_packages
            ;;
        yum)
            sudo yum remove $converted_packages
            ;;
    esac
}

# Show package information
info_package() {
    pkg_mgr=$(detect_package_manager)
    pkg="$1"
    converted_pkg=$(get_package_name "$pkg")
    
    printf "${BLUE}Package information for '$converted_pkg':${NC}\n"
    
    case "$pkg_mgr" in
        yay|paru)
            "$pkg_mgr" -Si "$converted_pkg"
            ;;
        pacman)
            pacman -Si "$converted_pkg"
            ;;
        apt)
            apt show "$converted_pkg"
            ;;
        apt-get)
            if command -v apt-cache >/dev/null 2>&1; then
                apt-cache show "$converted_pkg"
            fi
            ;;
        xbps)
            xbps-query -R "$converted_pkg"
            ;;
        dnf)
            dnf info "$converted_pkg"
            ;;
        yum)
            yum info "$converted_pkg"
            ;;
    esac
}

# Show help
show_help() {
    cat << 'EOF'
pac - Universal Package Manager Abstraction Tool

USAGE:
    pac <command> [arguments]

COMMANDS:
    install, i      Install packages
    list, l, search Search for packages (or list all if no query)
    remove, r       Remove packages
    update, u       Update package database
    upgrade, up     Upgrade all packages
    info, show      Show package information
    help, h         Show this help message

EXAMPLES:
    pac install git vim neovim
    pac list firefox
    pac search python
    pac remove old-package
    pac update
    pac upgrade
    pac info nodejs

The tool automatically detects your distribution and package manager,
and translates common package names to distribution-specific names.

SUPPORTED PACKAGE MANAGERS:
    - Arch Linux: yay, paru, pacman
    - Debian/Ubuntu: apt, apt-get
    - Void Linux: xbps-install/xbps-query
    - Fedora/RHEL: dnf, yum
EOF
}

# Generate zsh completion
generate_zsh_completion() {
    cat > "$PAC_CONFIG_DIR/_pac" << 'EOF'
#compdef pac

_pac() {
    local context state line
    local -a commands
    
    commands=(
        'install:Install packages'
        'i:Install packages'
        'list:List or search packages'
        'l:List or search packages'
        'search:Search for packages'
        'remove:Remove packages'
        'r:Remove packages'
        'update:Update package database'
        'u:Update package database'
        'upgrade:Upgrade all packages'
        'up:Upgrade all packages'
        'info:Show package information'
        'show:Show package information'
        'help:Show help message'
        'h:Show help message'
    )
    
    _arguments -C \
        '1: :->command' \
        '*: :->packages' \
    
    case $state in
        command)
            _describe 'commands' commands
            ;;
        packages)
            # Simple completion - could be enhanced with actual package names
            _files
            ;;
    esac
}

_pac
EOF
    
    printf "${GREEN}Zsh completion generated at $PAC_CONFIG_DIR/_pac${NC}\n"
    printf "${YELLOW}Add this to your .zshrc:${NC}\n"
    printf "fpath=($PAC_CONFIG_DIR \$fpath)\n"
    printf "autoload -U compinit && compinit\n"
}

# Main function
main() {
    case "${1:-help}" in
        install|i)
            shift
            if [ $# -eq 0 ]; then
                printf "${RED}Error: No packages specified${NC}\n"
                exit 1
            fi
            install_packages "$@"
            ;;
        list|l|search)
            shift
            list_packages "$1"
            ;;
        remove|r)
            shift
            if [ $# -eq 0 ]; then
                printf "${RED}Error: No packages specified${NC}\n"
                exit 1
            fi
            remove_packages "$@"
            ;;
        update|u)
            update_packages
            ;;
        upgrade|up)
            upgrade_packages
            ;;
        info|show)
            shift
            if [ $# -eq 0 ]; then
                printf "${RED}Error: No package specified${NC}\n"
                exit 1
            fi
            info_package "$1"
            ;;
        suggest)
            shift
            if [ $# -eq 0 ]; then
                printf "${RED}Error: No package specified${NC}\n"
                exit 1
            fi
            suggest_corrections "$1"
            ;;
        completion)
            generate_zsh_completion
            ;;
        help|h|-h|--help)
            show_help
            ;;
        *)
            printf "${RED}Error: Unknown command '$1'${NC}\n"
            printf "Run 'pac help' for usage information.\n"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"

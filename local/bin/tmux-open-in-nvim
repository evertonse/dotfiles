#!/bin/bash

# Get file path, defaulting to ~/todo.md if no argument provided
raw_path="${1:-$HOME/todo.md}"

# Split on last colon and take everything before it
# Using rev to handle the last colon reliably
# file=$(echo "$raw_path" | rev | cut -d':' -f2- | rev)

# NOTE: Won't work if a file has '('
file=$(echo "$raw_path" | cut -d'(' -f1 )
number=$(echo "$raw_path" | cut -d'(' -f2- | cut -d':' -f1 )
# grep "\([./a-z]*\)(\([0-9]*:[0-9]*\))"

if [ -z "$file" ]; then
    file=$(echo "$raw_path" | cut -d':' -f1)
    number=$(echo "$raw_path" | cut -d':' -f2)
fi


if [ -z "$file" ]; then
    file="$raw_path"
    number=""
fi

# Get realpath (resolving symlinks and relative paths)
if [ -e "$file" ]; then
    file=$(realpath "$file")
fi

# Expand the path to handle ~
file="$file|$number"

# We could replace something with this
# file=$(echo "$file" | sed 's/:/|/g')

echo $file

# Find first pane running nvim/neovim
pane=$(tmux list-panes -F '#{pane_id} #{pane_current_command}' | grep -E 'n?vim' | head -n 1 | awk '{print $1}')

if [ -n "$pane" ]; then
    # Send a sequence of commands to ensure we get to normal mode and open the file
    # tmux send-keys -t "$pane" Escape Escape C-x       # Ensure we're in normal mode
    tmux send-keys -t "$pane" Escape Escape ^\\ ^n
    # tmux send-keys -t "$pane" ":e $file" Enter  # Open the file
    tmux send-keys -t "$pane" ":lua GotoFileFromLine [[$file]]" Enter  # Open the file and let neovim handled it, expected GotoFileFromLine global function
    # tmux send-keys -t "$pane" zz # Center it OBS.: GotoFileFromLine already centers it
    tmux select-pane -t "$pane" # Focus the pane
else
    echo "No Vim/Neovim instance found in the current tmux window."
    exit 1
fi

#!/usr/bin/env python3
"""
Convert TOML theme format to LS_COLORS environment variable string
"""

import re
import sys
from pathlib import Path

YAZI_TO_LS_PATTERN = {
    '*/': 'di',          # directory
    '*': {               # these need additional 'is' field to determine type
        'block': 'bd',   # block device
        'char': 'cd',    # character device
        'exec': 'ex',    # executable
        'fifo': 'pi',    # named pipe
        'link': 'ln',    # symbolic link
        'orphan': 'or',  # orphaned symbolic link
        'sock': 'so',    # socket
        'sticky': 'st'   # sticky directory
    }
}

# Color name to ANSI code mappings
FG_COLOR_NAMES = {
    "black": 30, "red": 31, "green": 32, "yellow": 33, "blue": 34,
    "magenta": 35, "cyan": 36, "gray": 37, "darkgray": 90,
    "lightred": 91, "lightgreen": 92, "lightyellow": 93,
    "lightblue": 94, "lightmagenta": 95, "lightcyan": 96
}

BG_COLOR_NAMES = {
    "black": 40, "red": 41, "green": 42, "yellow": 43, "blue": 44,
    "magenta": 45, "cyan": 46, "gray": 47, "darkgray": 100,
    "lightred": 101, "lightgreen": 102, "lightyellow": 103,
    "lightblue": 104, "lightmagenta": 105, "lightcyan": 106
}

MODE_NAMES = {
    "bold": 1, "underline": 4, "blink": 5, "blink_rapid": 6,
    "reversed": 7, "hidden": 8, "crossed": 9
}

def generate_256_color_reverse_palette():
    """Generate reverse lookup for 256-color palette"""
    palette = {}
    
    # Generate the 6x6x6 color cube
    for r in range(6):
        for g in range(6):
            for b in range(6):
                index = 16 + r * 36 + g * 6 + b
                rgb_r = (55 if r else 0) + r * 40
                rgb_g = (55 if g else 0) + g * 40
                rgb_b = (55 if b else 0) + b * 40
                hex_color = f"#{rgb_r:02x}{rgb_g:02x}{rgb_b:02x}"
                palette[hex_color.lower()] = index
    
    # Grayscale spectrum
    for i in range(24):
        shade = 8 + i * 10
        index = 232 + i
        hex_color = f"#{shade:02x}{shade:02x}{shade:02x}"
        palette[hex_color.lower()] = index
    
    return palette

REVERSE_PALETTE = generate_256_color_reverse_palette()

def hex_to_ansi_code(color, is_background=False):
    """Convert hex color to ANSI escape code"""
    if not color:
        return []
    
    color = color.lower()
    
    # Handle named colors first
    if is_background and color in BG_COLOR_NAMES:
        return [BG_COLOR_NAMES[color]]
    elif not is_background and color in FG_COLOR_NAMES:
        return [FG_COLOR_NAMES[color]]
    
    # Handle hex colors
    if not color.startswith('#') or len(color) != 7:
        return []
    
    # Check if it's in the 256-color palette
    if color in REVERSE_PALETTE:
        prefix = 48 if is_background else 38
        return [prefix, 5, REVERSE_PALETTE[color]]
    
    # Convert to RGB
    try:
        r = int(color[1:3], 16)
        g = int(color[3:5], 16)
        b = int(color[5:7], 16)
        prefix = 48 if is_background else 38
        return [prefix, 2, r, g, b]
    except ValueError:
        return []


def parse_toml_rule(rule_text):
    """Parse a single TOML rule and extract components"""
    rule = {}
    
    # Extract name
    name_match = re.search(r'name\s*=\s*"([^"]*)"', rule_text)
    if name_match:
        rule['name'] = name_match.group(1)
    
    # Extract is
    is_match = re.search(r'is\s*=\s*"([^"]*)"', rule_text)
    if is_match:
        rule['is'] = is_match.group(1)
    
    # Extract colors
    fg_match = re.search(r'fg\s*=\s*"([^"]*)"', rule_text)
    if fg_match:
        rule['fg'] = fg_match.group(1)
    
    bg_match = re.search(r'bg\s*=\s*"([^"]*)"', rule_text)
    if bg_match:
        rule['bg'] = bg_match.group(1)
    
    # Extract modes
    for mode in MODE_NAMES:
        if re.search(rf'{mode}\s*=\s*true', rule_text):
            rule[mode] = True
    
    return rule

def yazi_pattern_to_ls(rule):
    """Convert Yazi pattern back to LS_COLORS pattern"""
    name = rule.get('name', '')
    is_type = rule.get('is')
    
    # Handle directory pattern
    if name == '*/':
        return 'di'
    
    # Handle patterns with 'is' field
    if name == '*' and is_type:
        return YAZI_TO_LS_PATTERN['*'].get(is_type)
    
    # Handle file extension patterns
    if name.startswith('*.'):
        return name
    
    # Handle other named patterns
    return name

def rule_to_ansi_codes(rule):
    """Convert a parsed rule to ANSI codes"""
    codes = []
    
    # Add foreground color
    if 'fg' in rule:
        codes.extend(hex_to_ansi_code(rule['fg'], False))
    
    # Add background color
    if 'bg' in rule:
        codes.extend(hex_to_ansi_code(rule['bg'], True))
    
    # Add modes
    for mode, code in MODE_NAMES.items():
        if rule.get(mode):
            codes.append(code)
    
    return codes

def parse_toml_content(content):
    """Parse TOML content and extract rules"""
    rules = []
    
    # Find the rules array
    rules_match = re.search(r'rules\s*=\s*\[(.*?)\]', content, re.DOTALL)
    if not rules_match:
        return rules
    
    rules_content = rules_match.group(1)
    
    # Split into individual rules
    # Handle nested braces properly
    brace_level = 0
    current_rule = ""
    
    for char in rules_content:
        if char == '{':
            brace_level += 1
        elif char == '}':
            brace_level -= 1
            
        current_rule += char
        
        if brace_level == 0 and char == '}':
            if current_rule.strip():
                rule = parse_toml_rule(current_rule.strip())
                if rule:
                    rules.append(rule)
            current_rule = ""
    
    return rules

def convert_toml_to_ls_colors(toml_content):
    """Convert TOML theme content to LS_COLORS string"""
    rules = parse_toml_content(toml_content)
    ls_entries = []
    
    for rule in rules:
        ls_pattern = yazi_pattern_to_ls(rule)
        if not ls_pattern:
            continue
            
        ansi_codes = rule_to_ansi_codes(rule)
        if ansi_codes:
            codes_str = ';'.join(map(str, ansi_codes))
            ls_entries.append(f"{ls_pattern}={codes_str}")
    
    return ':'.join(ls_entries)

def main():
    if len(sys.argv) != 2:
        print("Usage: python toml_to_ls_colors.py <theme.toml>", file=sys.stderr)
        sys.exit(1)
    
    toml_file = Path(sys.argv[1])
    
    if not toml_file.exists():
        print(f"Error: File '{toml_file}' not found", file=sys.stderr)
        sys.exit(1)
    
    try:
        with open(toml_file, 'r') as f:
            toml_content = f.read()
        
        ls_colors = convert_toml_to_ls_colors(toml_content)
        print(ls_colors)
        
    except Exception as e:
        print(f"Error processing file: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()

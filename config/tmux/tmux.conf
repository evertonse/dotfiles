# tips : /usr/bin/tmux list-keys | grep "prefix\s*<key-you-want-here>"
# Automatic install of TPM
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# If problems with visualizing status bar:
# :set status on

# if run as "tmux attach", create a session if one does not already exist
#new-session -n $HOST

# @important run: list-keys to see all bindings

# @important  first do this
# https://github.com/tmux-plugins/tpm
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# fix esc+h accidents
set -s escape-time 1
# set -s escape-time 0

# Window names
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# Use big history
set -g history-limit 1000000

set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
set -g monitor-activity on
# highlight window when it has new activity
set -g bell-action none

set-option -g focus-events on
set -g set-titles on
set -g set-titles-string "#S / #W"

setw -g aggressive-resize on

# set-option -g default-command "$SHELL"
set-option -g default-shell "$SHELL"


#>> ------------------- STATUS ------------------- #
# Remove padding around the status bar
# Set the status bar to be at the bottom
# enable UTF-8 support in status bar
set -g  status on
set -gq status-utf8 on
set -g  status-position bottom
set -gq allow-passthrough on
set -g  status-left-length 0
set -g  status-right-length 0

set -g status-interval 5
set -g status-justify left # center align window list

# Kill sesions with numbers only, you may change the grep pattern to do whatever
# tmux list-sessions | /usr/bin/grep '^[0-9]\+:'| cut -d: -f1 | while read session; do tmux kill-session -t $session; done

if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"
set-hook -g window-linked 'if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"'
set-hook -g window-unlinked 'if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"'

# set -g status-left "#[fg=#e9e9e9,bold] > #S #[default]"
# set -g status-left "#[default,bold] #[fg=#f4bf75,bold,bg=#222222] #S #[default] "
# ➤ 󰁕	⇨
# Leftwards Arrow	←	←	&#x2190;
# Rightwards Arrow	→	→	&#x2192;
# Upwards Arrow	↑	↑	&#x2191;
# Downwards Arrow	↓	↓	&#x2193;
# Left Right Arrow	↔	↔	&#x2194;
# Up Down Arrow	↕	↕	&#x2195;
# Right And Left Arrows	⇄	⇄	&#x21c4;
# Up And Down Arrows	⇅	⇅	&#x21c5;
# Down-Left 90deg Arrow	↲	↲	&#x21b2;
# Down-Right 90deg Arrow	↳	↳	&#x21b3;
# Up-Right 90deg Arrow	↱	↱	&#x21b1;
# Leftwards Arrow To Bar	⇤	⇤	&#x21e4;
# Anticlockwise Semicircle Arrow	↶	↶	&#x21b6;
# Clockwise Semicircle Arrow	↷	↷	&#x21b7;
# Anticlockwise Circle Arrow	↺	↺	&#x21ba;
# Clockwise Circle Arrow	↻	↻	&#x21bb;
# Wide-Headed Rightwards Arrow	➔	➔	&#x2794;
# Downwards Zigzag Arrow	↯	↯	&#x21af;
# North West Arrow	↖	↖	&#x2196;
# Heavy South East Arrow	➘	➘	&#x2798;
# Heavy Rightwards Arrow	➙	➙	&#x2799;
# Heavy North East Arrow	➚	➚	&#x279a;
# Dashed Rightwards Arrow	➟	➟	&#x279f;
# Dotted Leftwards Arrow	⇠	⇠	&#x21e0;
# Black Rightwards Arrowhead	➤	➤	&#x27a4;
# Leftwards White Arrow	⇦	⇦	&#x21e6;
# Rightwards White Arrow	⇨	⇨	&#x21e8;
# Left Angle Quotation Mark	«	«	&#xab;
# Right Angle Quotation Mark	»	»	&#xbb;

set -g detach-on-destroy off
set -g remain-on-exit on
set -g pane-died 'if -F "#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}" "killp; detach" "killp"'



set -g status-left "#[default,bold] #[fg=#f4bf75,bold,bg=default]↳ #S #[default]"


# set -g status-right '#H  #[fg=blue,bright]Up #(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=black] #[fg=cyan,bright]#(cut -d " " -f 1-4 /proc/loadavg) #[fg=blue] %d-%m-%Y %H:%M '
set -g status-right " #[fg=#f4bf75,bg=default] %a, %d %b %H:%M #[fg=default,bg=default] #(whoami)"


set -g status-style 'bg=terminal,fg=#5f5f5f'

setw -g window-status-activity-style "fg=#898989,bg=default,nobold"

# NOTE: matching with regex onto the window_flags, checking for '-' which means last window
# see : https://github.com/tmux/tmux/wiki/Formats
# setw -g window-status-format       "#{?#{m:*-*,#{window_flags}},#[fg=#e9e9e9]#[bg=#575875],#[fg=#222222]#[bg=#e1e1e1]}#[noitalics]#[nobold] #I #[nobold,fg=default,bg=default] #W"
setw -g window-status-format       "#{?#{m:*-*,#{window_flags}},#[fg=#e9e9e9]#[bg=#575875],#[fg=#222222]#[bg=#e1e1e1]}#[noitalics]#[nobold] #I #{?#{m:*#*,#{window_flags}},#[nobold]#[fg=#898989]#[bg=default],#[nobold]#[fg=default]#[bg=default]} #W "
setw -g window-status-last-style   "bold,italics"

set -g window-status-current-format "#[fg=#ffffff,bold]#[bg=#343665] #I #[bg=#e9e9e9]#[fg=#343665,bold] #W #{?#{==:#{window_flags},-},,}"




set -g window-status-separator " "

# https://www.man7.org/linux/man-pages/man1/tmux.1.html#STYLES
#<< ------------------- STATUS ------------------- #

# -------------------------------------------------- #
#>> ------------------- TERMINAL ------------------- #
set -sa terminal-features "*:strikethrough:RGB:title:ccolour:cstyle:clipboard"
# To give tmux awareness of undercurl and underline color, refer to
# https://github.com/alacritty/alacritty/issues/1628
set -as terminal-overrides ',*:smulx=\E[4:%p1%dm'
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
set-option -sa terminal-overrides ',tmux-256color:RGB'
# set -g  default-terminal "tmux-256color"

#set-option -g default-command bash


# set -as terminal-overrides ',*:Tc'
# set -as terminal-overrides ',*:smuc=\E[4:3m'
# set -g default-terminal 'alacritty'

# set -g  default-terminal "screen-256color"
# set-option -ga terminal-overrides ",xterm-256color:Tc"
# set-option -sa terminal-overrides ',xterm-256color:RGB'
# set -g default-terminal "xterm-256color"
# set -sa terminal-overrides ',xterm-256color:RGB'
# set -ga terminal-features ",xterm-256color:RGB"
#<< ------------------- TERMINAL ------------------- #
# -------------------------------------------------- #

set -g pane-border-style 'fg=#4d5057'
set -g pane-active-border-style 'fg=#444466'

# set -g window-style 'bg=#222222' # NOTE: Uncoment this to make active window not transparent
set -g window-style 'bg=terminal'
set -g window-active-style 'bg=terminal'


#-- ERROR $TERM should be "screen-256color" or "tmux-256color" in tmux. Colors might look wrong.
# set -ga terminal-overrides ",screen-256color*:Tc"
#set -ga terminal-overrides "st-256color"

set -s escape-time 0
set -g base-index 1


set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM



set -as terminal-features 'xterm*:extkeys'
set -s extended-keys on


# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
bind-key f resize-pane -Z

bind -r ( switch-client -p
bind -r ) switch-client -n
bind Tab switch-client -l

# Fucking ESC won't quit on command mode unless emacs mode xD
set-option -g status-keys emacs
set-window-option -g mode-keys emacs

bind '"' display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
bind "'" display-popup -E "tmux list-windows -F '#I: #W' | grep -v \"^$(tmux display-message -p '#I'): \" | fzf --reverse | cut -d':' -f1 | xargs tmux select-window -t"

# NOTE: Simpler version
# bind -n C-f display-popup -E "\
#   (tmux list-sessions -F '#S' && \
#    tmux list-windows -a -F '#S/#I: #W') | \
#   grep -v \"^$(tmux display-message -p '#S')\$\" | \
#   fzf --height 100% --reverse | \
#   awk -F'[/#:]' '{if (NF==1) system(\"tmux switch-client -t \" \$1); else system(\"tmux switch-client -t \" \$1 \" \\\\; select-window -t \" \$2)}'"

bind -n C-f display-popup -E -h 50% -w 50% "\
  (tmux list-sessions -F '#S' && \
   tmux list-windows -a -F '#S/#I: #W') | \
  grep -v \"^$(tmux display-message -p '#S')\$\" | \
  fzf --reverse --height 100% \
      --preview 'ses=\$(echo {} | cut -d\"/\" -f1); \
                 if [[ \"{}\" == *\/* ]]; then \
                   tmux capture-pane -pt \"\$ses:$(echo {} | cut -d\":\" -f1 | cut -d\"/\" -f2)\"; \
                 else \
                   echo \"Session: \$ses\"; \
                   tmux list-windows -t \"\$ses\" -F \"#I: #W\"; \
                 fi' \
      --preview-window=right:50% | \
  awk -F'[/#:]' '{if (NF==1) system(\"tmux switch-client -t \" \$1); else system(\"tmux switch-client -t \" \$1 \" \\\\; select-window -t \" \$2)}'"
# #!/bin/bash
# pane=$(tmux list-panes -F '#{pane_id} #{pane_current_command}' | grep nvim | head -n 1 | awk '{print $1}')
# if [ -n "$pane" ]; then
#   tmux send-keys -t "$pane" "nvr --remote ~/todo.md" Enter
# else
#   echo "No Neovim instance found in the current tmux window."
# fi




# Rotate panes
bind -r @ rotate-window

# Define a script within tmux.conf to check pane count and prompt for confirmation
# bind-key q if-shell '[[ $(tmux list-panes | wc -l) -eq 1 ]]' \
#   'confirm-before -p "This is the last pane. Are you sure you want to close it? (y/n)" "kill-pane"' \
#   'kill-pane'
  
bind-key q if-shell '[[ $(tmux list-panes | wc -l) -eq 1 ]]' \
  'confirm-before -p "This is the last pane. Are you sure you want to close it? (y/n)" "if-shell -F \"#{>=:#{session_windows},2}\" \"kill-window; switch-client -n\" \"kill-session\""' \
  'kill-pane'

# Repeated with above q and c, idk which is best for consistency with neovim
bind-key c if-shell '[[ $(tmux list-panes | wc -l) -eq 1 ]]' \
  'confirm-before -p "This is the last pane. Are you sure you want to close it? (y/n)" "kill-pane"' \
  'kill-pane'

unbind x

# split panes using | and -
bind 'v' split-window -h -c "#{pane_current_path}"
bind '\' split-window -v -c "#{pane_current_path}"
bind 's' split-window -v -c "#{pane_current_path}"
bind  s split-window -v -c "#{pane_current_path}"
bind  z split-window -v -c "#{pane_current_path}"

bind-key -r -T prefix       /                     resize-pane -D 2
bind-key -r  -T prefix       0                    select-window -t :=0
bind-key -r  -T prefix       1                    select-window -t :=1
bind-key -r  -T prefix       2                    select-window -t :=2
bind-key -r  -T prefix       3                    select-window -t :=3
bind-key -r  -T prefix       4                    select-window -t :=4
bind-key -r  -T prefix       5                    select-window -t :=5
bind-key -r  -T prefix       6                    select-window -t :=6
bind-key -r  -T prefix       7                    select-window -t :=7
bind-key -r  -T prefix       8                    select-window -t :=8
bind-key -r  -T prefix       9                    select-window -t :=9
unbind %
unbind '"'

# forget the find window.  That is for chumps
# switch panes using Alt-arrow without prefix



# Command	Description
# q	quit mode
# j, k, l, h	down, up, right left
# J or K	scroll down or up
# F or B	go to next or previous page
# $	go to end of line
# 0	go to beginning of line
# w or b	go to next or previous word
# / or ?	search forward or backward
# n	search next (use after above commands)
# space	start selection
# Esc	clear selection
# y	copy section



#set -g message-attr reverse
# Centering windows


bind n new-window -c "#{pane_current_path}"
# Define a script within tmux.conf to check window count and prompt for confirmation
bind-key w if-shell '[[ $(tmux list-windows | wc -l) -eq 1 ]]' \
  'confirm-before -p "This is the last window. Are you sure you want to close it? (y/n)" "kill-window"' \
  'kill-window'

unbind -n C-j
unbind -n C-k
bind -n C-M-j next-window
bind -n C-M-k previous-window
unbind Space


# vim-like pane switching
# https://github.com/ThePrimeagen/.dotfiles/blob/master/tmux/.tmux.conf
unbind Space
unbind up
unbind down
unbind left
unbind right

bind Space last-window
bind k select-pane -U
bind j select-pane -D
bind h select-pane -L
bind l select-pane -R

bind up select-pane -U
bind down select-pane -D
bind left select-pane -L
bind right select-pane -R

# Bind Ctrl+J to navigate down the command history
# bind -n C-j send-keys Down

# Bind Ctrl+K to navigate up the command history
# bind -n C-k send-keys Up


# Enable mouse control (clickable windows, panes, resizable panes)
# Enable mouse mode (tmux 2.1 and above)
set -g mouse on
#set -g mouse-select-window on
# set -g mouse-select-pane on
#set -g mouse-resize-paneeon
set-option -g allow-rename off
bind -r ',' resize-pane -L 2
bind -r '.' resize-pane -R 2

bind -r ';' resize-pane -U 2
bind -r '/' resize-pane -D 2


bind a choose-tree -Zs
bind C-a choose-tree -Zs
# root  sends Enter
bind-key -T root  l if -F "#{==:#{pane_mode},tree-mode}" "send Enter" "send l"


########THEME########
#####################
## DESIGN CHANGES  ##
#####################

#>>------------------PLUGINS----------------------#
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'jaclu/tmux-menus'

# C-r for restor and C-s to save
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @resurrect-save 'P'
# set -g @resurrect-restore 'R'
set -g @resurrect-save 'F5'
set -g @resurrect-restore 'F9'


set -g @plugin 'Morantron/tmux-fingers' # Required for the below
set -g @plugin 'trevarj/tmux-open-nvim'
# Use any path that is on your $PATH
# $ sudo ln -s ~/.tmux/plugins/tmux-open-nvim/scripts/ton /usr/local/bin/ton
#<<---------------------------------------------#

set -g @ton-open-strategy ":e"
# set -g @ton-menu-style
set -g @ton-prioritize-window true
# Overrides matching file paths with :[line]:[col] at the end
set -g @fingers-pattern-0 "(([.\\w\\-~\\$@]+)(\\/?[\\w\\-@]+)+\\/?)\\.([\\w]+)(:\\d*:\\d*)?"
# Launches helper script on Ctrl+[key] in fingers mode
set -g @fingers-ctrl-action "xargs -I {} tmux run-shell 'cd #{pane_current_path}; ~/.tmux/plugins/tmux-open-nvim/scripts/ton {} > ~/.tmux/plugins/tmux-open-nvim/ton.log'"
# Start tmux fingers by pressing Alt+F
# bind -n M-f run -b "#{@fingers-cli} start #{pane_id}"
# Start tmux fingers in jump mode by pressing Alt+J
# bind -n M-j run -b "#{@fingers-cli} start #{pane_id} --mode jump"


####################################################
## Current Pane Hostname
set -g @plugin 'townk/tmux-current-pane-hostname'
####################################################

#>>--------------PLUGINS CONFIG------------------#
# Restore all programs (be careful with this!):
# set -g @resurrect-processes ':all:'  # Had problems with this in the past
# set -g @resurrect-processes '~Vim -> vim'
# Restore Vim sessions
# set -g @resurrect-strategy-vim 'session'
# Restore Neovim sessions
# set -g @resurrect-strategy-nvim 'session'

# Restore Panes
set -g @resurrect-capture-pane-contents 'on'
# Restore last saved environment (automatically)
set -g @continuum-restore 'on'


####################################################
# Yank plugin block
# set -g @plugin 'tmux-plugins/tmux-yank'

set -g @yank_line 'Y'
set -g @yank_pane_pwd 'y'
set -g @copy_mode_yank 'y'
set -g @copy_mode_put 'p'
set -g @copy_mode_yank_put 'P'
set -g @copy_mode_yank_wo_newline 'M-y'
set -g @shell_mode 'vi'
####################################################
#<<--------------PLUGINS CONFIG------------------#

#Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

#--------------------------------------------------------------#
#----------------------COPY-VI---------------------------------#
#--------------------------------------------------------------#
# ```
# https://www.reddit.com/r/tmux/comments/v73005/how_to_prevent_tmux_from_exiting_copy_mode_after/:
# So I was having trouble too and got it to work by adding the command after my run tpm command: run '~/.tmux/plugins/tpm/tpm'
# Seems like one of the plugins was causing the bind-key command to get overwritten.
# ```

# set vi mode for copy mode
set -g mode-keys vi
unbind -T copy-mode-vi Space; #Default for begin-selection
unbind -T copy-mode-vi Enter; #Default for copy-selection
# start selection with 'space' and copy using 'y'
# paste using 'p'
unbind p
bind p paste-buffer
bind-key    -T copy-mode    C-c               send-keys -X cancel
bind-key    -T copy-mode    Escape            send-keys -X cancel
bind-key    -T copy-mode    q                 send-keys -X cancel
# copy mode using 'Esc'
unbind [

bind Escape copy-mode
# in copy-mode use 'v' to start selecting like vim visual mode
bind -T copy-mode-vi y                 send-keys -X   copy-selection -x
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X   copy-selection -x
bind -T copy-mode-vi Escape            send-keys -X   cancel
# TODO: Actually find a way proper way to cancel selecton without exiting from copy mode
bind -T copy-mode-vi C-c               send-keys  X   clear-selection
bind -T copy-mode-vi q                 send-keys -X   cancel
bind -T copy-mode-vi v                 send-keys -X   begin-selection
# Make 'Y' copy the whole line
bind -T copy-mode-vi Y send-keys -X select-line \; send-keys -X copy-selection -x
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel --clipboard"
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"`

# Bind 'f' in copy mode to capture the current line and send it to the script
# bind -T copy-mode-vi f send-keys -X select-line \; \
#                        send-keys -X copy-pipe-and-cancel "tmux-open-in-nvim &> /tmp/tmux-open-in-nvim.log"
                       # In your tmux.conf

bind -T copy-mode-vi f send-keys -X select-line \; \
                       send-keys -X copy-pipe "xargs -I {} tmux-open-in-nvim '{}' &> /tmp/tmux-open-in-nvim.log"

# Alternative version that keeps you in copy mode after sending:
# bind -T copy-mode-vi f send-keys -X select-line \; \
#                        send-keys -X copy-pipe "tmux-open-in-nvim" \; \
#                        send-keys -X clear-selection
#--------------------------------------------------------------#
#--------------------------------------------------------------#

# reload config file (change file location to your the tmux.conf you want to use)
# bind r source-file ~/.tmux.conf
bind r source-file ~/.config/tmux/tmux.conf; display 'OK: ~/.config/tmux/tmux.conf reloaded'



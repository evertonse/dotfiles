stty stop undef		# Disable ctrl-s to freeze terminal.
stty -ixon
# Enable colors and change prompt:
autoload -U colors && colors	# Load colors
#PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "

setopt autocd		# Automatically cd into typed directory.
setopt interactive_comments
setopt MENU_COMPLETE
unsetopt flow_control

source ~/.config/shell/aliases.sh
source ~/.config/shell/vars.sh

[[ $- != *i* ]] && return

# History in cache directory:
HISTSIZE=100000
SAVEHIST=100000
setopt HIST_EXPIRE_DUPS_FIRST
# Load tmux-resurrect pane history workaround

[[ -f ~/.config/zsh/zsh-tmux-restore-history.zsh ]] && source ~/.config/zsh/zsh-tmux-restore-history.zsh

# Load aliases and shortcuts if existent.

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
# [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/fsh/fast-syntax-highlighting.plugin.zsh" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/fsh/fast-syntax-highlighting.plugin.zsh"




[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc"
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliases.sh" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliases.sh"

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.
setopt NO_BEEP

# vi mode
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char




function accept-line-and-run() {
  # Simulate pressing Ctrl + L to accept the autosuggestion
  # zle complete-word
  zle autosuggest-accept
  # # Provide a visual feedback delay (adjust the sleep duration as needed)
  sleep 0.1
  zle redisplay
  # # Simulate pressing Enter to accept and execute the command
  zle accept-line
}


zle -N accept-line-and-run
# Reason for line below is explained by by: https://unix.stackexchange.com/questions/740102/end-of-line-widget-not-working-in-functions-zsh-autosuggestions
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS+=(accept-line-and-run)

bindkey '^S' accept-line-and-run # TODO: crtl+s is too useful to be wasted, make a use of it
bindkey '^y' accept-line-and-run
bindkey '^L' autosuggest-accept
bindkey '^H' backward-delete-char
bindkey '^K' up-line-or-history
bindkey '^J' down-line-or-history
bindkey '\t' expand-or-complete

bindkey '^[[Z' reverse-menu-complete
bindkey "^E" forward-word
bindkey "^B" backward-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey -s '^G' '$EXPLORER .^M'

# Change cursor shape for different vi modes.
function zle-keymap-select () {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';;      # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# Use lf to switch directories and bind it to ctrl-o
lfcd () {
    tmp="$(mktemp -uq)"
    trap 'rm -f $tmp >/dev/null 2>&1 && trap - HUP INT QUIT TERM PWR EXIT' HUP INT QUIT TERM PWR EXIT
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

# WSL: Check if we're in wsl
if [[ $(grep -i Microsoft /proc/version) ]]; then
    code='~/code/'
    export GDK_BACKEND=x11
    export WIN_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r\n')
    export WIN_USERPROFILE="/mnt/c/Users/$WIN_USER/"
    export WIN_DOWNLOADS="/mnt/c/Users/$WIN_USER/Downloads"


    ## Tryin to squeeze performance
    # echo 0 > /proc/sys/fs/binfmt_misc/WSLInterop
    unset WSL_INTEROP
    # To re-enable Windows binaries, exit all WSL sessions and re-run bash.exe or run the following command as root:
    # echo 1 > /proc/sys/fs/binfmt_misc/WSLInterop


    # export DISPLAY=$(ip route | awk '/^default/{print $3; exit}'):0
    # export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0
    # export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0
    export DISPLAY=$(ip route list default | awk '{print $3}'):0 # Only one that worked
    export LIBGL_ALWAYS_INDIRECT=1
    # IMPORTANT: RUN Xming and XLaunch/VcXsrv using the -ac flag.

    code='/mnt/d/code'
    alias explorer='explorer.exe'
    # alias explorer=explorer.exe `wslpath -w "$PWD"`
    
    if ! command -v wsl-open > /dev/null; then
      echo 'your using wsl, but does not have wsl-open, which is a pretty good utility to open win10+ apps from wsl'
    fi
    alias open='wsl-open'
    # facilitate windows executable interop
    function exe {
        target=$(wslpath "$(awk -F$'\r' 'NR == 1 {printf "%s", $1}' <<< $(/mnt/c/Windows/System32/cmd.exe /c where $1 2>/dev/null))")
        if [[ "$target" == "." ]]; then
            echo "Command '$1' not found."
        else
            $target ${@:2}
        fi
    }

    # Hash holding paths that shouldn't be grepped (globbed) â€“ blacklist for slow disks, mounts, etc.:
    typeset -gA FAST_BLIST_PATTERNS
    FAST_BLIST_PATTERNS[/mnt/*/**]=1
    ZSH_HIGHLIGHT_DIRS_BLACKLIST+=(/mnt/*)

    disable_windows_path='false'

    # Function to filter out Windows paths from PATH
    filter_windows_path() {
        PATH=$(echo $PATH | sed s/:/\\n/g | grep -v '/mnt/c' | sed ':a;N;$!ba;s/\n/:/g')
    }

    # Check if disable_windows_path is true
    if [[ $disable_windows_path == 'true' ]]; then
        export PATH=$(filter_windows_path)
    fi
fi


function tmux_last_session(){
   LAST_TMUX_SESSION=$(tmux list-sessions | awk -F ":" '{print$1}' | tail -n1);
   tmux attach -t $LAST_TMUX_SESSION
}

function git_branch() {
    branch=$(git symbolic-ref HEAD 2> /dev/null | awk 'BEGIN{FS="/"} {print $NF}')
    if [[ $branch == "" ]]; then
        :
    else
        echo ' (' $branch ') '
    fi
}

setopt prompt_subst

autoload -U colors && colors
function change_color() {
    if [[ "$?" = 0 ]]; then
    return "green"
  else
    return "red"
  fi
}

# add setopt PROMPT_SUBST to your .zshrc. This "allows for functions in the prompt"
# use single quotes when defining your PS1 / PROMPT. If you use double quotes, then the whole string will be evaluated once when the terminal starts, and then that evaluated value is "re-executed" every time the command changes. But you want the functions to be re-evaluated, not the output of the function at the time when the terminal is created.
# Easiest example I used to confirm I had it working:
NEWLINE=$'\n'
PROMPT='[%n @ %B%~%b] ${NEWLINE}$ '
RPROMPT='$(git_branch)%T'

# Where should I put you?

# Define a custom widget to clear the line and open nvim
function clear_and_nvim {
  # Clear the current line
  zle kill-whole-line
  # Insert the command
  LBUFFER="nvim"
  # Simulate pressing Enter
  zle accept-line
}

function clear_and_exit {
  # Clear the current line
  zle kill-whole-line
  # Insert the command
  LBUFFER="exit"
  # Simulate pressing Enter
  zle accept-line
}

function clear_and_tmux {
  zle kill-whole-line
  LBUFFER="tmux -2 a  || tmux -2"
  zle accept-line
}

# Bind the custom widget to Ctrl+n
zle -N clear_and_nvim
zle -N clear_and_exit
zle -N clear_and_tmux
bindkey '^t'  clear_and_tmux
bindkey '^n' clear_and_nvim
bindkey '^q' clear_and_exit

bindkey -s ^f "tmux-sessionizer\n"
# bindkey -s ^n "nvim .\n"
# bindkey -s ^n "nvim +\"Telescope find_files initial_mode=insert\"\n"



# [[ -z $DISPLAY ]] && { mkdir -p "$HOME/.local/state" && source ~/.config/shell/startup.sh > "$HOME/.local/state/startup.log" &>/dev/null; } &>/dev/null &
[[ -z $DISPLAY ]] && setsid bash -c '({ mkdir -p "$HOME/.local/state" && source ~/.config/shell/startup.sh &> "$HOME/.local/state/startup.log" &>/dev/null; } &>/dev/null)' &> /dev/null
[[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]] &&  exec $WM_EXEC &> /dev/null

